{"version":3,"sources":["screen/Joke.js","App.js","reportWebVitals.js","index.js"],"names":["Joke","handleText","slitArr","state","text","split","setState","txtArr","getJoke","Math","round","random","that","Axios","get","then","res","loading","sentence","data","setup","delivery","replace","match","returnArr","ii","length","inputArr","push","className","document","getElementById","innerText","inputTxt","console","log","componentDidMount","generateAJoke","ev","value","next","handleInputChange","target","keyboard","setInput","splitArr","onChange","input","onKeyPress","button","handleShift","layoutName","handleKeyPress","key","code","querySelector","classList","add","isUpperCase","letter","toUpperCase","handleKeyUp","remove","this","Input","placeholder","autoComplete","id","onKeyDown","onKeyUp","Button","onClick","keyboardRef","r","theme","React","Component","App","handleItemClick","e","name","activeItem","handlePages","class","Menu","pointing","Item","active","position","icon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8SA8TeA,E,kDApTb,aAAe,IAAD,8BACZ,gBAaFC,WAAa,WACX,IAAMC,EAAU,EAAKC,MAAMC,KAAKC,MAAM,KACtC,EAAKC,SAAS,CACZC,OAAQL,KAjBE,EAyBdM,QAAU,WACMC,KAAKC,MAAMD,KAAKE,UAA9B,IAGMC,EAAI,eAGRC,IAAMC,IAAI,gDAAgDC,MAAK,SAACC,GAC9DJ,EAAKN,UAAS,iBAAO,CACnBW,SAAS,MAGX,IAEMC,EAFQF,EAAIG,KAAKC,MAEE,IADRJ,EAAIG,KAAKE,SAK1BH,EACGI,QAAQ,UAAM,KACdA,QAAQ,UAAM,KACdA,QAAQ,UAAM,KACdA,QAAQ,OAAQ,KAGnBV,EAAKN,UAAS,iBAAO,CACnBF,KAAMc,EACND,SAAS,MAGX,EAAKhB,iBAvDG,EAmFdsB,MAAQ,WAEN,IADA,IAAMC,EAAY,GACTC,EAAK,EAAGA,EAAK,EAAKtB,MAAMI,OAAOmB,SAAUD,EAC5C,EAAKtB,MAAMI,OAAOkB,KAAQ,EAAKtB,MAAMwB,SAASF,IAChDD,EAAUI,KACR,uBAAMC,UAAU,UAAhB,UAA2B,EAAK1B,MAAMI,OAAOkB,GAA7C,QAEEA,IAAO,EAAKtB,MAAMI,OAAOmB,OAAS,IACpCI,SAASC,eAAe,iBAAiBC,UAAY,cACjD,EAAK7B,MAAMC,OAAS,EAAKD,MAAM8B,UACjCC,QAAQC,IAAI,iBAGN,EAAKhC,MAAMwB,SAASF,GAK1BA,IAAO,EAAKtB,MAAMwB,SAASD,OAAS,EACtCF,EAAUI,KACR,uBAAMC,UAAU,OAAhB,UAAwB,EAAK1B,MAAMI,OAAOkB,GAA1C,QAGFD,EAAUI,KACR,uBAAMC,UAAU,YAAhB,UAA6B,EAAK1B,MAAMI,OAAOkB,GAA/C,QAVJD,EAAUI,KACR,uBAAMC,UAAU,WAAhB,UAA4B,EAAK1B,MAAMI,OAAOkB,GAA9C,QAcN,OAAOD,GAhHK,EAmHdY,kBAAoB,WAClB,EAAK5B,WApHO,EAwHd6B,cAAgB,SAACC,GAEf,EAAK9B,UACLsB,SAASC,eAAe,aAAaQ,MAAQ,GAC7C,EAAKjC,SAAS,CACZ2B,SAAU,GACVN,SAAU,GACVa,KAAM,KA/HI,EAmIdC,kBAAoB,SAACH,GACnB,EAAKhC,SACH,CACE2B,SAAUK,EAAGI,OAAOH,QAEtB,WACE,EAAKI,SAASC,SAASN,EAAGI,OAAOH,UAIrC,IAAMM,EAAWP,EAAGI,OAAOH,MAAMlC,MAAM,KAEvC,EAAKC,SAAS,CACZqB,SAAUkB,KAhJA,EAqJdC,SAAW,SAACC,GACV,EAAKzC,SAAS,CACZ2B,SAAUc,KAvJA,EA2JdC,WAAa,SAACC,GACG,YAAXA,GAAmC,WAAXA,GAC1B,EAAKC,eA7JK,EAiKdA,YAAc,WACZ,IAAIC,EAAa,EAAKhD,MAAMgD,WAE5B,EAAK7C,SAAS,CACZ6C,WAA2B,YAAfA,EAA2B,QAAU,aArKvC,EAyKdC,eAAiB,SAACd,GAChB,IAAIe,EAAMf,EAAGe,IAEG,UAAZf,EAAGgB,OAIK,UAARD,GACF,EAAKH,cAGK,aAARG,GACF,EAAKH,cAGK,MAARG,EACFA,EAAM,UACW,cAARA,EACTA,EAAM,SACW,QAARA,IACTA,EAAM,SAGQ,cAAZf,EAAGgB,MAAoC,eAAZhB,EAAGgB,MAAiC,SAARD,IAE7C,MAARA,EACFvB,SAASyB,cAAc,qBAA8BC,UAAUC,IAAI,mBAC9C,cAAZnB,EAAGgB,KACZxB,SAASyB,cAAc,mCAAmCC,UAAUC,IAAI,mBACvD,QAARJ,GAAyB,YAARA,GAA6B,cAARA,GAA+B,eAARA,GAAgC,YAARA,GAA6B,cAARA,EACnHnB,QAAQC,IAAI,kBAEZL,SAASyB,cAAc,gBAAkBF,EAAM,MAAMG,UAAUC,IAAI,sBAzM3D,EA8MdC,YAAc,SAACC,GAAD,OAAYA,IAAWA,EAAOC,eA9M9B,EAwOdC,YAAc,SAACvB,GACb,IAAIe,EAAMf,EAAGe,IAEG,UAAZf,EAAGgB,MAKK,UAARD,GACF,EAAKH,cAGK,MAARG,EACFA,EAAM,UACW,cAARA,EACTA,EAAM,SACW,QAARA,IACTA,EAAM,SAGQ,cAAZf,EAAGgB,MAAoC,eAAZhB,EAAGgB,MAAiC,SAARD,IAC7C,MAARA,EACFvB,SAASyB,cAAc,qBAA8BC,UAAUM,OAAO,mBAEjD,cAAZxB,EAAGgB,KACZxB,SAASyB,cAAc,mCAAmCC,UAAUM,OAAO,mBAE1D,QAART,GAAyB,YAARA,GAA6B,cAARA,GAA+B,eAARA,GAAgC,YAARA,GAA6B,cAARA,EACnHnB,QAAQC,IAAI,kBAEZL,SAASyB,cAAc,gBAAkBF,EAAM,MAAMG,UAAUM,OAAO,qBA1BxE,EAAKzB,iBA1OP,EAAKlC,MAAQ,CACXqC,KAAM,EACNvB,SAAS,EACTkC,WAAY,UACZ/C,KAAM,GACNG,OAAQ,GACR0B,SAAU,GACVN,SAAU,IATA,E,0CA8Qd,WAAU,IAAD,OACP,OACE,8BACE,gCACE,2CAEA,4BAAIoC,KAAKxC,UAET,gCACE,cAACyC,EAAA,EAAD,CACEC,YAAY,YACZC,aAAa,MACbpB,SAAUiB,KAAKtB,kBACf0B,GAAG,YACH5B,MAAOwB,KAAK5D,MAAM8B,SAClBmC,UAAWL,KAAKX,eAChBiB,QAASN,KAAKF,cAEhB,cAACS,EAAA,EAAD,CAAQC,QAASR,KAAK1B,cAAe8B,GAAG,gBAAxC,2BAKF,8BACE,cAAC,IAAD,CACEK,YAAa,SAACC,GAAD,OAAQ,EAAK9B,SAAW8B,GACrCC,MAAO,mBACPvB,WAAYY,KAAK5D,MAAMgD,WACvBL,SAAU,SAACC,GAAD,OAAW,EAAKD,SAASC,IACnCC,WAAY,SAACC,GAAD,OAAY,EAAKD,WAAWC,iB,GA5SnC0B,IAAMC,W,SCsDVC,E,kDAtDb,aAAe,IAAD,8BACZ,gBAMFC,gBAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiB,EAAK1E,SAAS,CAAE2E,WAAYD,KAPjD,EASdE,YAAc,WAEZ,OADAhD,QAAQC,IAAI,YACkB,SAA1B,EAAKhC,MAAM8E,YACb/C,QAAQC,IAAI,iBACL,+CAC4B,UAA1B,EAAKhC,MAAM8E,YACpB/C,QAAQC,IAAI,gBACL,cAAC,EAAD,UAFF,GAZP,EAAKhC,MAAQ,CACX8E,WAAY,QAHF,E,0CAoBd,WACE,IAAQA,EAAelB,KAAK5D,MAApB8E,WAER,OAAO,sBAAKE,MAAM,UAAX,UACL,eAACC,EAAA,EAAD,CAAMC,UAAQ,EAAd,UACE,cAACD,EAAA,EAAKE,KAAN,CACEN,KAAK,OACLO,OAAuB,SAAfN,EACRV,QAASR,KAAKe,kBAEhB,cAACM,EAAA,EAAKE,KAAN,CACEN,KAAK,QACLO,OAAuB,UAAfN,EACRV,QAASR,KAAKe,kBAEhB,cAACM,EAAA,EAAKE,KAAN,CACEN,KAAK,SACLO,OAAuB,WAAfN,EACRV,QAASR,KAAKe,kBAEhB,cAACM,EAAA,EAAKA,KAAN,CAAWI,SAAS,QAApB,SACE,cAACJ,EAAA,EAAKE,KAAN,UACE,cAACtB,EAAA,EAAD,CAAOyB,KAAK,SAASxB,YAAY,qBAKvC,qBAAKE,GAAG,QAAR,SACGJ,KAAKmB,uB,GAjDIP,IAAMC,WCITc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7E,MAAK,YAAkD,IAA/C8E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtE,SAASC,eAAe,SAM1B2D,M","file":"static/js/main.46ead394.chunk.js","sourcesContent":["// import ShowBox from \"./components/ShowBox\";\r\n// import InputBox from \"./components/InputBox\"\r\nimport React from \"react\";\r\nimport Axios from \"axios\";\r\nimport { Input, Button } from \"semantic-ui-react\";\r\nimport { render } from \"react-dom\";\r\nimport Keyboard from \"react-simple-keyboard\";\r\nimport \"react-simple-keyboard/build/css/index.css\";\r\n\r\nclass Joke extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      next: 0,\r\n      loading: false,\r\n      layoutName: \"default\",\r\n      text: \"\",\r\n      txtArr: [],\r\n      inputTxt: \"\",\r\n      inputArr: [],\r\n    };\r\n  }\r\n\r\n  // handleText() split and save state.text as state.txtArr\r\n  handleText = () => {\r\n    const slitArr = this.state.text.split(\" \");\r\n    this.setState({\r\n      txtArr: slitArr,\r\n    });\r\n  };\r\n\r\n  // getJoke() is responsible of randomly pulls a joke one of the 2 different APIs, namely:\r\n  //    1. https://v2.jokeapi.dev/joke/Any?type=twopart\r\n  //    2. https://official-joke-api.appspot.com/jokes/random // for some reason not working correctly\r\n  // and then save it to the state.text, and then saving it as an array to state.textArr\r\n  getJoke = () => {\r\n    const which = Math.round(Math.random()); // return either 0 or 1\r\n\r\n    // saving this to that\r\n    const that = this;\r\n\r\n    // if (which === 0) {\r\n      Axios.get(\"https://v2.jokeapi.dev/joke/Any?type=twopart\").then((res) => {\r\n        that.setState(() => ({\r\n          loading: true\r\n        }))\r\n\r\n        const setup = res.data.setup;\r\n        const delivery = res.data.delivery;\r\n        const sentence = setup + \" \" + delivery;\r\n\r\n        // due to the joke api's messing up with \"‘\", \"’\", \"“\", \"”\",\r\n        //    I need to manually replace them with the correct version of quotes.\r\n        sentence\r\n          .replace(/’/g, \"'\")\r\n          .replace(/“/g, '\"')\r\n          .replace(/”/g, '\"')\r\n          .replace(/  +/g, \" \");\r\n\r\n        // saving to txtArr\r\n        that.setState(() => ({\r\n          text: sentence,\r\n          loading: false\r\n        }));\r\n\r\n        this.handleText();\r\n        // this.handleNextChar()\r\n      });\r\n    // } else {\r\n    //   Axios.get(\"https://official-joke-api.appspot.com/jokes/random\").then((res) => {\r\n    //     that.setState(() => ({\r\n    //       loading: true\r\n    //     }))\r\n\r\n    //     const setup = res.data.setup;\r\n    //     const delivery = res.data.punchline;\r\n    //     const sentence = setup + \" \" + delivery;\r\n    //     sentence\r\n    //       .replace(/’/g, \"'\")\r\n    //       .replace(/“/g, '\"')\r\n    //       .replace(/”/g, '\"')\r\n    //       .replace(/  +/g, \" \");\r\n    //     that.setState((state) => ({\r\n    //       text: sentence,\r\n    //       loading: false\r\n    //     }));\r\n\r\n    //     this.handleText();\r\n    //   });\r\n    // }\r\n  };\r\n\r\n  // match() checks if an input word matches the txtArr\r\n  match = () => {\r\n    const returnArr = [];\r\n    for (var ii = 0; ii < this.state.txtArr.length; ++ii) {\r\n      if (this.state.txtArr[ii] === this.state.inputArr[ii]) {\r\n        returnArr.push(\r\n          <span className=\"correct\">{this.state.txtArr[ii]} </span>\r\n        );\r\n        if (ii === this.state.txtArr.length - 1) {\r\n          document.getElementById(\"getJokeButton\").innerText = \"Get another\";\r\n          if (this.state.text === this.state.inputTxt) {\r\n            console.log(\"all correct\")\r\n          }\r\n        }\r\n      } else if (!this.state.inputArr[ii]) {\r\n        returnArr.push(\r\n          <span className=\"notExist\">{this.state.txtArr[ii]} </span>\r\n        );\r\n      } else {\r\n        if (ii === this.state.inputArr.length - 1) {\r\n          returnArr.push(\r\n            <span className=\"next\">{this.state.txtArr[ii]} </span>\r\n          );\r\n        } else {\r\n          returnArr.push(\r\n            <span className=\"incorrect\">{this.state.txtArr[ii]} </span>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return returnArr;\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getJoke();\r\n    // this.handleNextChar()\r\n  };\r\n\r\n  generateAJoke = (ev) => {\r\n    // ev.preventDefault();\r\n    this.getJoke();\r\n    document.getElementById(\"typeInput\").value = \"\";\r\n    this.setState({\r\n      inputTxt: \"\",\r\n      inputArr: [],\r\n      next: 0\r\n    });\r\n  };\r\n\r\n  handleInputChange = (ev) => {\r\n    this.setState(\r\n      {\r\n        inputTxt: ev.target.value,\r\n      },\r\n      () => {\r\n        this.keyboard.setInput(ev.target.value);\r\n      }\r\n    );\r\n\r\n    const splitArr = ev.target.value.split(\" \");\r\n\r\n    this.setState({\r\n      inputArr: splitArr,\r\n    })\r\n\r\n  };\r\n\r\n  onChange = (input) => {\r\n    this.setState({\r\n      inputTxt: input,\r\n    });\r\n  };\r\n\r\n  onKeyPress = (button) => {\r\n    if (button === \"{shift}\" || button === \"{lock}\") {\r\n      this.handleShift();\r\n    }\r\n  };\r\n\r\n  handleShift = () => {\r\n    let layoutName = this.state.layoutName;\r\n\r\n    this.setState({\r\n      layoutName: layoutName === \"default\" ? \"shift\" : \"default\",\r\n    });\r\n  };\r\n\r\n  handleKeyPress = (ev) => {\r\n    var key = ev.key\r\n\r\n    if (ev.code === \"Enter\") {\r\n      return\r\n    }\r\n\r\n    if (key === \"Shift\") {\r\n      this.handleShift();\r\n    }\r\n\r\n    if (key === \"CapsLock\") {\r\n      this.handleShift();\r\n    }\r\n\r\n    if (key === \" \") {\r\n      key = \"{space}\"\r\n    } else if (key === \"Backspace\") {\r\n      key = \"{bksp}\"\r\n    } else if (key === \"Tab\") {\r\n      key = \"{tab}\"\r\n    }\r\n\r\n    if (ev.code !== \"ShiftLeft\" && ev.code !== \"ShiftRight\" && key !== \"Meta\") {\r\n      // this.handleNextChar()\r\n      if (key === \"'\") {\r\n        document.querySelector('[data-skbtn=\"' + \"'\" + '\"]').classList.add(\"hg-activeButton\")\r\n      } else if (ev.code === \"Backslash\") {\r\n        document.querySelector('[data-skbtnuid=\"default-r1b13\"]').classList.add(\"hg-activeButton\")\r\n      } else if (key === \"Alt\" || key === \"Control\" || key === \"ArrowLeft\" || key === \"ArrowRight\" || key === \"ArrowUp\" || key === \"ArrowDown\") {\r\n        console.log(\"alt || control\")\r\n      } else {\r\n        document.querySelector(\"[data-skbtn='\" + key + \"']\").classList.add(\"hg-activeButton\")\r\n      }\r\n    }\r\n  }\r\n\r\n  isUpperCase = (letter) => letter === letter.toUpperCase()\r\n\r\n  // handleNextChar = () => {\r\n  //   if (this.state.inputTxt.length === this.state.text.length) {\r\n  //     console.log(\"finished\")\r\n  //   } else {\r\n  //     var nextKey = this.state.text.split(\"\")[this.state.inputTxt.length]\r\n  //     console.log(nextKey)\r\n\r\n  //     if (nextKey === \" \") {\r\n  //       nextKey = \"{space}\"\r\n  //     }\r\n\r\n  //     if (nextKey === \"'\") {\r\n  //       document.querySelector('[data-skbtn=\"' + \"'\" + '\"]').classList.add(\"buttonNext\")\r\n  //     } else if (nextKey === \"\\\\\") {\r\n  //       document.querySelector('[data-skbtnuid=\"default-r1b13\"]').classList.add(\"buttonNext\")\r\n  //     } else if (this.isUpperCase(nextKey)) {\r\n  //       document.querySelector('[data-skbtnuid=\"default-r3b0\"]').classList.add(\"buttonNext\")\r\n  //       document.querySelector(\"[data-skbtn='\" + nextKey.toLowerCase() + \"']\").classList.add(\"buttonNext\")\r\n  //     } else {\r\n  //       document.querySelector(\"[data-skbtn='\" + nextKey + \"']\").classList.add(\"buttonNext\")\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  handleKeyUp = (ev) => {\r\n    var key = ev.key\r\n\r\n    if (ev.code === \"Enter\") {\r\n      this.generateAJoke()\r\n      return\r\n    }\r\n\r\n    if (key === \"Shift\") {\r\n      this.handleShift();\r\n    }\r\n\r\n    if (key === \" \") {\r\n      key = \"{space}\"\r\n    } else if (key === \"Backspace\") {\r\n      key = \"{bksp}\"\r\n    } else if (key === \"Tab\") {\r\n      key = \"{tab}\"\r\n    }\r\n\r\n    if (ev.code !== \"ShiftLeft\" && ev.code !== \"ShiftRight\" && key !== \"Meta\") {\r\n      if (key === \"'\") {\r\n        document.querySelector('[data-skbtn=\"' + \"'\" + '\"]').classList.remove(\"hg-activeButton\")\r\n        // document.querySelector('[data-skbtn=\"' + \"'\" + '\"]').classList.remove(\"buttonNext\")\r\n      } else if (ev.code === \"Backslash\") {\r\n        document.querySelector('[data-skbtnuid=\"default-r1b13\"]').classList.remove(\"hg-activeButton\")\r\n        // document.querySelector('[data-skbtnuid=\"default-r1b13\"]').classList.remove(\"buttonNext\")\r\n      } else if (key === \"Alt\" || key === \"Control\" || key === \"ArrowLeft\" || key === \"ArrowRight\" || key === \"ArrowUp\" || key === \"ArrowDown\") {\r\n        console.log(\"alt || control\")\r\n      } else {\r\n        document.querySelector(\"[data-skbtn='\" + key + \"']\").classList.remove(\"hg-activeButton\")\r\n        // document.querySelector(\"[data-skbtn='\" + key + \"']\").classList.remove(\"buttonNext\")\r\n      }\r\n    }\r\n\r\n    // this.handleNextChar()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h1>Type Fun!</h1>\r\n\r\n          <p>{this.match()}</p>\r\n\r\n          <div>\r\n            <Input\r\n              placeholder=\"Type here\"\r\n              autoComplete=\"off\"\r\n              onChange={this.handleInputChange}\r\n              id=\"typeInput\"\r\n              value={this.state.inputTxt}\r\n              onKeyDown={this.handleKeyPress}\r\n              onKeyUp={this.handleKeyUp}\r\n            />\r\n            <Button onClick={this.generateAJoke} id=\"getJokeButton\">\r\n              Get a joke\r\n            </Button>\r\n          </div>\r\n\r\n          <div>\r\n            <Keyboard\r\n              keyboardRef={(r) => (this.keyboard = r)}\r\n              theme={\"hg-theme-default\"}\r\n              layoutName={this.state.layoutName}\r\n              onChange={(input) => this.onChange(input)}\r\n              onKeyPress={(button) => this.onKeyPress(button)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Joke;\r\n","// import ShowBox from \"./components/ShowBox\";\n// import InputBox from \"./components/InputBox\"\nimport 'semantic-ui-css/semantic.min.css'\nimport \"./App.css\";\nimport React from \"react\";\nimport Joke from \"./screen/Joke\"\nimport { Input, Menu } from 'semantic-ui-react'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      activeItem: \"Home\"\n    }\n  }\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n  handlePages = () => {\n    console.log(\"handling\")\n    if (this.state.activeItem === \"Home\") {\n      console.log(\"home now babe\")\n      return <h1>this is home</h1>\n    } else if (this.state.activeItem === \"Jokes\") {\n      console.log(\"just kidding\")\n      return <Joke />\n    }\n  }\n\n  render() {\n    const { activeItem } = this.state\n\n    return <div class=\"wrapper\">\n      <Menu pointing>\n        <Menu.Item\n          name='Home'\n          active={activeItem === 'Home'}\n          onClick={this.handleItemClick}\n        />\n        <Menu.Item\n          name='Jokes'\n          active={activeItem === 'Jokes'}\n          onClick={this.handleItemClick}\n        />\n        <Menu.Item\n          name='Quotes'\n          active={activeItem === 'Quotes'}\n          onClick={this.handleItemClick}\n        />\n        <Menu.Menu position='right'>\n          <Menu.Item>\n            <Input icon='search' placeholder='Search...' />\n          </Menu.Item>\n        </Menu.Menu>\n      </Menu>\n\n      <div id=\"pages\">\n        {this.handlePages()}\n      </div>\n    </div>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}